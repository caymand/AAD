#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Summary
\end_layout

\begin_layout Section
Art Gallery problem
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Introduction to the problem
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Definitions
\end_layout

\begin_layout Enumerate

\series bold
A simple polygon 
\begin_inset Formula $\mathbf{P}$
\end_inset

 
\series default
is a region enclosed by a 
\emph on
single 
\emph default
polygonal chain that does not intersect itself.
 By this definition, we cannot have holes in a simple polygon.
 
\end_layout

\begin_layout Enumerate

\series bold
Diagonal 
\series default
in a polygon 
\begin_inset Formula $P$
\end_inset

 is a line segment that connects two vertices of the polygon 
\begin_inset Formula $P$
\end_inset

.
 The line segments must lie on the interior of 
\begin_inset Formula $P$
\end_inset

, and the diagonals can therefore not 
\begin_inset Quotes eld
\end_inset

cross corners
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate

\series bold
Triangulation 
\series default
is a decomposition of 
\begin_inset Formula $P$
\end_inset

 into triangles by a maximum set of non-overlapping 
\emph on
diagonals
\emph default
.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Why do we require maximum set?
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate

\series bold
Dual graph 
\series default
of a triangulated polygon places a node in each triangle, and an edge between
 each node if the triangles share a diagonal.
\end_layout

\begin_layout Enumerate

\series bold
Comp shaped polygon 
\series default
always 
\begin_inset Formula $\lfloor n/3\rfloor$
\end_inset

 cameras - one for each peak.
\end_layout

\begin_layout Enumerate

\series bold
Monotone polygon
\series default
: A polygon is monotone to line 
\begin_inset Formula $l$
\end_inset

 if there fore every line 
\begin_inset Formula $l'$
\end_inset

 perpendicular to 
\begin_inset Formula $l$
\end_inset

, the intersection of 
\begin_inset Formula $l'$
\end_inset

 and the polygon is connected.
 This means all intersections with 
\begin_inset Formula $l'$
\end_inset

 should form a line segment, be empty or only contain a point.
 
\begin_inset Formula $\mathbf{y}$
\end_inset

-
\series bold
monotone 
\series default
simply means we have 
\begin_inset Formula $l=y$
\end_inset

, and thus the name 
\begin_inset Formula $y$
\end_inset

-monotone polygon.
\end_layout

\begin_layout Enumerate

\series bold
Below: 
\begin_inset Formula $p$
\end_inset

 
\series default
is below 
\begin_inset Formula $q$
\end_inset

 if 
\begin_inset Formula $p_{y}<q_{y}$
\end_inset

 or if 
\begin_inset Formula $p_{y}=q_{y}\land p_{x}>q_{x}$
\end_inset


\end_layout

\begin_layout Enumerate

\series bold
Above: 
\begin_inset Formula $p$
\end_inset

 
\series default
is below 
\begin_inset Formula $q$
\end_inset

 if 
\begin_inset Formula $p_{y}>q_{y}$
\end_inset

 or if 
\begin_inset Formula $p_{y}=q_{y}\land p_{x}<q_{x}$
\end_inset


\end_layout

\begin_layout Enumerate

\series bold
Start vertex
\series default
 
\begin_inset Formula $v$
\end_inset

: If the two neighbors are below and interior angle at 
\begin_inset Formula $v$
\end_inset

 is less than 
\begin_inset Formula $\pi$
\end_inset


\end_layout

\begin_layout Enumerate

\series bold
Split vertex 
\begin_inset Formula $v$
\end_inset

: 
\series default
if the interior angle is greater than 
\begin_inset Formula $\pi$
\end_inset


\end_layout

\begin_layout Enumerate

\series bold
End vertex 
\begin_inset Formula $v$
\end_inset


\series default
: if the two neighbors lie above an the interior angle is below 
\begin_inset Formula $\pi$
\end_inset


\end_layout

\begin_layout Enumerate

\series bold
Merge vertex 
\begin_inset Formula $v$
\end_inset


\series default
: if the angle is greater than 
\begin_inset Formula $\pi$
\end_inset


\end_layout

\begin_layout Enumerate

\series bold
Regular vertex
\series default
: one neighbor above the other below
\end_layout

\begin_layout Enumerate

\series bold
Left chain
\series default
: The left boundary of the polygon from the top most vertex to the bottom
 most vertex.
\end_layout

\begin_layout Enumerate

\series bold
Right chain
\series default
: Analogous to the left chain but on the boundary on the right side.
\end_layout

\begin_layout Subsection
Solution to the problem
\end_layout

\begin_layout Standard
We can solve the art gallery problem by placing a camera in each of the
 triangles of in a triangulated polygon.
 Why? The camera can the points in the interior of the polygon for which
 there is an open line segment on the interior (not crossing corners) of
 the polygon connecting the points to the camera.
 Since there is an open line segment between all points in a triangle and
 the camera, then this solves the 
\emph on
art gallery problem.
\end_layout

\begin_layout Subsection
Does a triangulation always exist?
\end_layout

\begin_layout Subsubsection*

\series bold
\emph on
Theorem 3.1
\end_layout

\begin_layout Standard
Every simple polygon admits a triangulation, and any triangulation of a
 simple polygon with n vertices consists of exactly nâˆ’2 triangles.
\end_layout

\begin_layout Subsubsection*

\emph on
Proof
\end_layout

\begin_layout Standard
The proof is on induction on 
\begin_inset Formula $n$
\end_inset

, the number of vertices in the polygon.
 The base case is for 
\begin_inset Formula $n=3$
\end_inset

, and this trivially holds since this is a triangle, which is triangulated
 by 
\begin_inset Formula $n-2=1$
\end_inset

 triangle.
\end_layout

\begin_layout Standard
Next, assume 
\begin_inset Formula $n>3$
\end_inset

 and the induction hypothesis holds for all 
\begin_inset Formula $m<n$
\end_inset

.
 Since a triangulation consists of a maximum set of non-overlapping diagonals,
 let us first prove the existence of a diagonal.
 Let 
\begin_inset Formula $P$
\end_inset

 be a polygon of 
\begin_inset Formula $n$
\end_inset

 vertices.
 Let us pick the vertex 
\begin_inset Formula $v$
\end_inset

 that is furthest to the left in 
\begin_inset Formula $P$
\end_inset

, and break ties by choosing the lowest vertex.
 Let the vertices 
\begin_inset Formula $u,w$
\end_inset

 be the neighbors of 
\begin_inset Formula $v$
\end_inset

 on the border of 
\begin_inset Formula $P$
\end_inset

 (we know there are two neighbors since 
\begin_inset Formula $n>3$
\end_inset

).
 If the line segment 
\begin_inset Formula $\overline{uw}$
\end_inset

 is on the interior of 
\begin_inset Formula $P$
\end_inset

 then we have a diagonal (this is by definition a diagonal by the definition).
 However, if 
\begin_inset Formula $\overline{uw}$
\end_inset

 is not on the interior of the line segment, then let 
\begin_inset Formula $v'$
\end_inset

 be the vertex the furthest from the left from the line segment and let
 
\begin_inset Formula $v'\neq v$
\end_inset

.
 The line segment 
\begin_inset Formula $\overline{vv'}$
\end_inset

 cannot intersect another edge, since this contradicts choosing 
\begin_inset Formula $v'$
\end_inset

 as the vertex furthest to the left of 
\begin_inset Formula $\overline{uw}$
\end_inset

.
 Since 
\begin_inset Formula $v'$
\end_inset

 is the line segment furthest to the left the segment must also be inside
 the polygon, so 
\begin_inset Formula $\overline{vv'}$
\end_inset

 is a diagonal.
\end_layout

\begin_layout Standard
We have shown that a diagonal exists.
 For the first case, the polygon is simply split into the triangle 
\begin_inset Formula $\Delta vuw$
\end_inset

 and the simple polygon of one vertex less (we essentially cut off 
\begin_inset Formula $v$
\end_inset

).
 Thereby, by induction the smaller polygon can now be triangulated since
 we assumed it holds for all 
\begin_inset Formula $m<n$
\end_inset

 and 
\begin_inset Formula $n-1<n$
\end_inset

.
 For the second case, the diagonal splits the simple polygon into two simple
 polygons 
\begin_inset Formula $P_{1}$
\end_inset

 and 
\begin_inset Formula $P_{2}$
\end_inset

 of size 
\begin_inset Formula $m_{1}$
\end_inset

 and 
\begin_inset Formula $n-m_{1}+2$
\end_inset

 respectively.
 We get that 
\begin_inset Formula $P_{2}$
\end_inset

 has size 
\begin_inset Formula $n-m_{1}+2$
\end_inset

 since, 
\begin_inset Formula $P$
\end_inset

 originally had 
\begin_inset Formula $n$
\end_inset

 vertices and we cut away 
\begin_inset Formula $P_{1}$
\end_inset

with 
\begin_inset Formula $m$
\end_inset

 vertices, but the diagonal still shares 
\begin_inset Formula $2$
\end_inset

 vertices.
 Since we have that 
\begin_inset Formula $3\leq m_{1}$
\end_inset

 (otherwise it would not be a triangulation) then 
\begin_inset Formula $n-m+2\leq n-1<n$
\end_inset

 and so we can again use induction to show each subpolygon can be triangulated.
\end_layout

\begin_layout Standard
In either case however, the diagonal we choose, splits the two polygons
 into two smaller simple polygons 
\begin_inset Formula $P_{1}$
\end_inset

 and 
\begin_inset Formula $P_{2}$
\end_inset

 of size 
\begin_inset Formula $m_{1}$
\end_inset

 and 
\begin_inset Formula $m_{2}$
\end_inset

 respectively.
 All vertices of 
\begin_inset Formula $P$
\end_inset

 are in either of the two vertices.
 But the two polygons also share two vertices at the diagonal, and these
 vertices are counted twice.
 Hence we get 
\begin_inset Formula $m_{1}+m_{2}=n+2$
\end_inset

 and we have proved that each polygon have 
\begin_inset Formula $m_{i}<n$
\end_inset

.
 Each simple polygon can by the induction hypothesis be triangulated by
 
\begin_inset Formula $m_{i}-2$
\end_inset

 vertices.
 Using this we get 
\begin_inset Formula 
\begin{align*}
m_{1}+m_{2}-4 & =n+2-4\\
(m_{1}-2)+ & (m_{2}-2)=n-2
\end{align*}

\end_inset


\end_layout

\begin_layout Subsection
3-coloring
\end_layout

\begin_layout Standard
A three coloring always exists.
 Can be seen by looking at the dual graph and that is in fact a tree.
 This shows the art gallery theorem, since we can place all cameras at a
 particular color.
 There are 
\begin_inset Formula $n$
\end_inset

 vertices and 
\begin_inset Formula $3$
\end_inset

 colors.
\end_layout

\begin_layout Standard

\series bold
Theorem 3.2 (Art Gallery Theorem) 
\series default
For a simple polygon with 
\begin_inset Formula $n$
\end_inset

 vertices, 
\begin_inset Formula $\lfloor n/3\rfloor$
\end_inset

 cameras are occasionally necessary and always sufficient to have every
 point in the polygon visible from at least one of the cameras.
\end_layout

\begin_layout Subsection
Two-ears theorem and algorithm
\end_layout

\begin_layout Standard
Based on the proof that a triangulation always exists for a simple polygon,
 we can just find diagonals, solve the problem recursively and cut of triangles.
 Takes time 
\begin_inset Formula $O(n^{2})$
\end_inset


\end_layout

\begin_layout Section
Y-monotone partitioning
\end_layout

\begin_layout Subsection*
Ideas
\end_layout

\begin_layout Standard
We can use top down plane sweep to split a non y-monotone polygon into pieces
 that are y monotone.
 Each iteration goes one vertex down.
 Then we will triangulate each y-monotone piece.
 The question is how should we determine at each iteration whether the current
 part of the polygon is y-monotone or we break the invariant? We remove
 split-and merge vertices as this theorem shows
\end_layout

\begin_layout Quote

\series bold
Lemma 3.4:
\series default
\emph on
 A polygon is y-monotone if it has no split vertices or merge vertices.
\end_layout

\begin_layout Itemize
The theorem implies we have y-monotone polygons after removing split and
 merge vertices
\end_layout

\begin_layout Itemize
We create the y-monotone pieces by creating up-diagonals from split vertices
 and downward diagonals of merge vertices
\end_layout

\begin_deeper
\begin_layout Itemize
Each diagonal creates a new polygon
\end_layout

\begin_layout Itemize
Once all are removed we have y-monotone polygons
\end_layout

\end_deeper
\begin_layout Subsection*
Split vertices
\end_layout

\begin_layout Standard
We let the vertices 
\begin_inset Formula $v_{1},v_{2},...,v_{n}$
\end_inset

 be the vertices of the polygons taken by a counterclockwise enumeration
 along the border.
 We define an edge to be 
\begin_inset Formula $e_{i}=\overline{v_{i}v_{i+1}}$
\end_inset

.
 The algorithm is a sweeping algorithm, using a top-down sweep line halting
 for certain events at vertices.
 We store the vertices in a priority 
\begin_inset Formula $Q$
\end_inset

 stored with priority by 
\begin_inset Formula $y$
\end_inset

 coordinate and breaking ties with the leftmost point on the 
\begin_inset Formula $x$
\end_inset

-axis.
 We can now get event points is 
\begin_inset Formula $O(\lg n)$
\end_inset

 time, or presort and get them in 
\begin_inset Formula $O(n\cdot\lg n)$
\end_inset

 time.
\end_layout

\begin_layout Standard
Based on the above ideas, we want to add diagonals from a 
\series bold
split vertex
\series default
 to get y-monotone pieces.
 Let us say the sweep-line is at the vertex 
\begin_inset Formula $v_{i}$
\end_inset

 and the edge to the left of 
\begin_inset Formula $v_{i}$
\end_inset

 is called 
\begin_inset Formula $e_{j}$
\end_inset

(note the edges intersects the sweep line) and the edge immediately to the
 right is called 
\begin_inset Formula $e_{k}$
\end_inset

.
 Now we can connect 
\begin_inset Formula $v_{i}$
\end_inset

 to the lowest vertex that is between the edges 
\begin_inset Formula $e_{j}$
\end_inset

 and 
\begin_inset Formula $e_{k}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Split vertex
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Such a vertex might not exist, in which case we can connect 
\begin_inset Formula $v_{i}$
\end_inset

 to the upper endpoint of 
\begin_inset Formula $e_{j}$
\end_inset

 or 
\begin_inset Formula $e_{k}$
\end_inset

.
 We define these 3 vertices as the 
\begin_inset Formula $helper(e_{j})$
\end_inset

.
 It is formally defined as the lowest vertex above the sweep-line such that
 the horizontal segment taken by connecting 
\begin_inset Formula $helper(e_{j})$
\end_inset

 and 
\begin_inset Formula $e_{J}$
\end_inset

is within 
\begin_inset Formula $P$
\end_inset

.
 In other words, the helper of an edge is the lowest vertex above the sweep
 line such that the horizontal line segment from the edge to the vertex
 is within 
\begin_inset Formula $P$
\end_inset

.
\series bold
In short:
\series default
 
\emph on
split vertices are handled by connecting 
\begin_inset Formula $v_{i}$
\end_inset

 to the helper of the edge to the left.
 
\end_layout

\begin_layout Subsection*
Merge Vertex
\end_layout

\begin_layout Standard
We handle these differently from split vertices.
 We can only work with vertices above the sweep line, but merge vertexes
 are handled by connecting merge vertex 
\begin_inset Formula $v_{i}$
\end_inset

 to the highest vertex below the sweep line.
 Let 
\begin_inset Formula $e_{k}$
\end_inset

 be the edge intersecting the sweep line to the left of 
\begin_inset Formula $v_{i}$
\end_inset

 and let 
\begin_inset Formula $e_{j}$
\end_inset

 be the right edge.
 
\emph on
An observation at this point is that 
\begin_inset Formula $v_{i}$
\end_inset

 will become the helper of 
\begin_inset Formula $e_{j}$
\end_inset

, since it is the lowest vertex with line segment connecting 
\begin_inset Formula $e_{j}$
\end_inset

 to 
\begin_inset Formula $v_{i}$
\end_inset

 being inside the polygon.
 
\emph default
The goal is to connect 
\begin_inset Formula $v_{i}$
\end_inset

 to the highest vertex below the sweep line between edges 
\begin_inset Formula $e_{j}$
\end_inset

 and 
\begin_inset Formula $e_{k}$
\end_inset

(this is the opposite of what we did for split vertices).
 Since we cannot access vertices below the sweep line, we simply save 
\begin_inset Formula $v_{i}$
\end_inset

 for later.
 When we reach a new vertex 
\begin_inset Formula $v_{m}$
\end_inset

 that becomes the helper for 
\begin_inset Formula $e_{j}$
\end_inset

, then we make a diagonal from 
\begin_inset Formula $v_{m}$
\end_inset

 to 
\begin_inset Formula $v_{i}$
\end_inset

.
 On thing to note is that when the new helper 
\begin_inset Formula $v_{m}$
\end_inset

 is itself a helper, we add the diagonal anyhow, and we get rid of both
 a split and merge vertex with one diagonal.
 Not also that there might not appear any new helpers below 
\begin_inset Formula $v_{i}$
\end_inset

- this is fixed be just connecting 
\begin_inset Formula $v_{i}$
\end_inset

 to the lower endpoint of edge 
\begin_inset Formula $e_{j}$
\end_inset

 .
\end_layout

\begin_layout Subsection*
Data structure
\end_layout

\begin_layout Standard
For both types of problematic vertices, we only look at the left edge, since
 we create diagonals by connecting vertices with their helper of the edge
 to the left.
 With a dynamic binary search tree, 
\begin_inset Formula $T$
\end_inset

, we can save the edges of intersection the sweep line.
 By doing this, we can distinguish between left and right edge by left and
 right leaves.
 Furthermore, since the algorithm only considers edges to the left of split-
 and merge edges, we can get by with only storing edges that have the inner
 of the polygon to the right (these are potential left edges).
 Each edge also stores its helper.
 We call the tree the 
\emph on
status
\emph default
 since it stores the status of the sweeping algorithm.
 In short we store a tree as follows
\end_layout

\begin_layout Enumerate
Store edges intersecting the sweep line in the leaves of a binary search
 tree 
\begin_inset Formula $T$
\end_inset


\end_layout

\begin_layout Enumerate
Use left and right children to distinguish left- and right edges
\end_layout

\begin_layout Enumerate
Only store edges that have the inner of the polygon to the right.
 These are the edges that can be left edges
\end_layout

\begin_layout Enumerate
Store the helper together with the edge
\end_layout

\begin_layout Enumerate
Update the tree, called 
\emph on
status
\emph default
, when moving the sweep line
\end_layout

\begin_deeper
\begin_layout Enumerate
Update the helper - we use this for merge vertices
\end_layout

\end_deeper
\begin_layout Standard
We need to store the y-monotone pieces and the diagonals that splits the
 polygon into monotone pieces.
 To store polygon pieces and diagonals found we use a doubly-linked list
 of edges? When finding diagonals at split-and merge edges, we add this
 to the doubly linked list.
\end_layout

\begin_layout Subsection*
Start vertex algorithm
\end_layout

\begin_layout Standard
For start vertex 
\begin_inset Formula $v_{i}$
\end_inset

we do as follows
\end_layout

\begin_layout Enumerate
Add 
\begin_inset Formula $e_{i}$
\end_inset

 to 
\begin_inset Formula $T$
\end_inset


\end_layout

\begin_layout Enumerate
Set 
\begin_inset Formula $helper(e_{i})=v_{i}$
\end_inset

(this is stored together with 
\begin_inset Formula $e_{i}$
\end_inset

)
\end_layout

\begin_layout Subsection*
End vertex algorithm
\end_layout

\begin_layout Standard
For an end vertex 
\begin_inset Formula $v_{i}$
\end_inset


\end_layout

\begin_layout Enumerate
Check if 
\begin_inset Formula $helper(e_{i-1})$
\end_inset

 is a merge vertex (this is the edge coming into 
\begin_inset Formula $v_{i}$
\end_inset

)
\end_layout

\begin_deeper
\begin_layout Enumerate
Insert diagonal connecting 
\begin_inset Formula $v_{i}$
\end_inset

 to 
\begin_inset Formula $helper(e_{i-1})$
\end_inset

 in 
\begin_inset Formula $D$
\end_inset

 (this is the case there are no lower vertices below the sweep line)
\end_layout

\end_deeper
\begin_layout Enumerate
Delete 
\begin_inset Formula $e_{i-1}$
\end_inset

from 
\begin_inset Formula $T$
\end_inset


\end_layout

\begin_layout Subsection*
Split vertex algorithm
\end_layout

\begin_layout Standard
For split vertex 
\begin_inset Formula $v_{i}$
\end_inset


\end_layout

\begin_layout Enumerate
Search 
\begin_inset Formula $T$
\end_inset

 for edge 
\begin_inset Formula $e_{j}$
\end_inset

 directly to left of 
\begin_inset Formula $v_{i}$
\end_inset

(directly to left is defined earlier)
\end_layout

\begin_layout Enumerate
Insert diagonal from 
\begin_inset Formula $v_{i}$
\end_inset

 to 
\begin_inset Formula $helper(e_{j})$
\end_inset

 into 
\begin_inset Formula $D$
\end_inset

 (we now know 
\begin_inset Formula $v_{i}$
\end_inset

is the lowest vertex that has line segment inside 
\begin_inset Formula $P$
\end_inset

 intersecting 
\begin_inset Formula $e_{j}$
\end_inset

)
\end_layout

\begin_layout Enumerate
\begin_inset Formula $helper(e_{j})=v_{i}$
\end_inset

 
\end_layout

\begin_layout Enumerate
insert 
\begin_inset Formula $e_{i}$
\end_inset

 into 
\begin_inset Formula $T$
\end_inset

 and set 
\begin_inset Formula $helper(e_{i})$
\end_inset

 to 
\begin_inset Formula $v_{i}$
\end_inset

.
 
\begin_inset Formula $(e_{i}$
\end_inset

is the edge going down to the right from 
\begin_inset Formula $v_{i}$
\end_inset

.
 So in this case we set the helper of the edge to its upper end-point)
\end_layout

\begin_layout Subsection*
Merge vertex algorithm
\end_layout

\begin_layout Enumerate
If the helper to edge
\begin_inset Formula $e_{i-1}$
\end_inset

(
\begin_inset Formula $helper(e_{i-1})$
\end_inset

) is a merge vertex (the edge 
\begin_inset Formula $e_{i-1}$
\end_inset

will be the edge going from the right going into 
\begin_inset Formula $v_{i}$
\end_inset

.
 Now we check if the helper of this edge is a merge vertex and eliminate
 two merge vertices)
\end_layout

\begin_deeper
\begin_layout Enumerate
Insert diagonal between 
\begin_inset Formula $helper(e_{i-1})$
\end_inset

 and 
\begin_inset Formula $v_{i}$
\end_inset

in 
\begin_inset Formula $D$
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Delete 
\begin_inset Formula $e_{i-1}$
\end_inset

 from 
\begin_inset Formula $T$
\end_inset

 
\end_layout

\begin_layout Enumerate
Search 
\begin_inset Formula $T$
\end_inset

 to find edge 
\begin_inset Formula $e_{j}$
\end_inset

 directly to the left of 
\begin_inset Formula $v_{i}$
\end_inset

.
 The definition of directly to the left is the one described earlier, but
 in short it is the first edge hit by the sweep line that has a line segment
 connected to 
\begin_inset Formula $v_{i}$
\end_inset

 inside the polygon
\end_layout

\begin_layout Enumerate
if the helper of 
\begin_inset Formula $e_{j}$
\end_inset

 is a merge vertex (this is the case where we replace helper of an edge,
 and we have to check if the old helper is a merge vertex)
\end_layout

\begin_deeper
\begin_layout Enumerate
Insert diagonal connecting 
\begin_inset Formula $v_{i}$
\end_inset

 to 
\begin_inset Formula $helper(e_{j})$
\end_inset

 into 
\begin_inset Formula $D$
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Formula $helper(e_{j})=v_{i}$
\end_inset


\end_layout

\begin_layout Standard
Alternative is to not handle merge vertices at all.
 Then, each subpolygon created is flipped around so merge vertices become
 split vertices, and we run the algorithm again.
 Alternatively, sweep from upwards.
\end_layout

\begin_layout Subsection*
Regular vertex algorithm
\end_layout

\begin_layout Enumerate
When the interior of 
\begin_inset Formula $P$
\end_inset

 lies to the right of 
\begin_inset Formula $v_{i}$
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
If helper 
\begin_inset Formula $e_{i-1}$
\end_inset

(edge coming into 
\begin_inset Formula $v_{i}$
\end_inset

) is a merge vertex
\end_layout

\begin_deeper
\begin_layout Enumerate
Insert diagonal between 
\begin_inset Formula $v_{i}$
\end_inset

 and 
\begin_inset Formula $helper(e_{i-1})$
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Delete 
\begin_inset Formula $e_{i-1}$
\end_inset

from 
\begin_inset Formula $T$
\end_inset


\end_layout

\begin_layout Enumerate
Insert 
\begin_inset Formula $e_{i}$
\end_inset

in 
\begin_inset Formula $T$
\end_inset

 and set 
\begin_inset Formula $helper(e_{i})=v_{i}$
\end_inset

(the helper of the edge is now the upper end-point)
\end_layout

\end_deeper
\begin_layout Enumerate
Else find edge 
\begin_inset Formula $e_{j}$
\end_inset

directly to the left(using correct definition of what this means) of 
\begin_inset Formula $v_{i}$
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
if the helper 
\begin_inset Formula $helper(e_{j})$
\end_inset

 is a merge vertex
\end_layout

\begin_deeper
\begin_layout Enumerate
Insert diagonal between 
\begin_inset Formula $v_{i}$
\end_inset

and 
\begin_inset Formula $helper(e_{j})$
\end_inset

 into 
\begin_inset Formula $D$
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Now we also update the helper, 
\begin_inset Formula $helper(e_{J})=v_{i}$
\end_inset

, since 
\begin_inset Formula $v_{i}$
\end_inset

is the lowest vertex that has edge 
\begin_inset Formula $e_{j}$
\end_inset

directly to the left
\end_layout

\end_deeper
\begin_layout Subsection*
Degenerate cases
\end_layout

\begin_layout Subsection*
Proof of correctness for each algorithm
\end_layout

\begin_layout Subsection*
Running time
\end_layout

\begin_layout Standard
We initialize the priority queue 
\begin_inset Formula $Q$
\end_inset

 by 
\begin_inset Formula $y$
\end_inset

-coordinate and breaking ties with lowest 
\begin_inset Formula $x$
\end_inset

-coordinate.
 The priority queue can be a max heap, so it takes linear time to build.
 At each iteration of the algorithm we query for the next event, 
\begin_inset Formula $v_{i}$
\end_inset

.
 Each of these queries take 
\begin_inset Formula $O(\text{\ensuremath{\log n)}}$
\end_inset

time.
 We insert at most two diagonals (in case of merge vertices) into 
\begin_inset Formula $D$
\end_inset

.
 Each insert takes constant time 
\begin_inset Formula $O(1)$
\end_inset

, and otherwise do constant time operations, so the time is 
\begin_inset Formula $O(n\log n)$
\end_inset

.
 
\end_layout

\begin_layout Standard
For storage, we store every vertex in 
\begin_inset Formula $Q$
\end_inset

.
 Every edge is stored at most once in 
\begin_inset Formula $T$
\end_inset

.
 We have more vertices than edges and so we get linear storage 
\begin_inset Formula $O(n)$
\end_inset

.
\end_layout

\begin_layout Section
Triangulating a monotone polygon
\end_layout

\begin_layout Standard
The algorithm handles the vertices in decreasing order of 
\begin_inset Formula $y$
\end_inset

-coordinates.
 We can assume that the polygon is strictly y-monotone such that there are
 no horizontal edges, and hence no ties in 
\begin_inset Formula $y$
\end_inset

-coordinates and we precede strictly top down.
 The algorithm uses a stack 
\begin_inset Formula $S$
\end_inset

 whose purpose is shown below
\end_layout

\begin_layout Enumerate
Uses a stack 
\begin_inset Formula $S$
\end_inset

 for vertices encountered
\end_layout

\begin_layout Enumerate
Add ass many diagonals from 
\begin_inset Formula $v_{j}$
\end_inset

to the vertices on the stack
\end_layout

\begin_layout Enumerate
\begin_inset Formula $S$
\end_inset

 will contain vertices of 
\begin_inset Formula $P$
\end_inset

 that may still need more diagonals
\end_layout

\begin_layout Enumerate
The diagonals splits off triangles from 
\begin_inset Formula $P$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $S$
\end_inset

 will contain vertices that have not been split of in a triangle
\end_layout

\begin_layout Enumerate
The vertices still in 
\begin_inset Formula $S$
\end_inset

 are on the boundary of the part of 
\begin_inset Formula $P$
\end_inset

 that still needs triangulation
\end_layout

\begin_layout Enumerate
\begin_inset Formula $S$
\end_inset

 is ordered so that the last encountered, and therefore the lowest visited
 vertex, is on the top of the stack.
\end_layout

\begin_layout Enumerate

\emph on
The part of 
\begin_inset Formula $P$
\end_inset

 that lie above the last seen vertex and still needs to be triangulated
 form an upside down funnel.
\end_layout

\begin_deeper
\begin_layout Enumerate
The funnel has two boundaries
\end_layout

\begin_deeper
\begin_layout Enumerate
One of them contains just a part of one of the edges of 
\begin_inset Formula $P$
\end_inset


\end_layout

\begin_layout Enumerate
The other con boundary a chain of reflex vertices (vertices with interior
 angle above 
\begin_inset Formula $180\textdegree$
\end_inset

.
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Only the highest vertex (bottom of the stack) is convex - degree above 180
 (
\begin_inset Formula $\pi$
\end_inset

 radians).
 This is an invariant of the algorithm that holds after visiting at each
 vertex.
\end_layout

\begin_layout Standard
Now we will look at how the algorithm adds diagonals.
\end_layout

\begin_layout Subsection*
Algorithm
\end_layout

\begin_layout Enumerate
The left and right chain of the polygon are sorted into a sequence by decreasing
 
\begin_inset Formula $y$
\end_inset

-coordinate (highest 
\begin_inset Formula $y$
\end_inset

-coordinate first).
 Ties are broken by lowest 
\begin_inset Formula $x$
\end_inset

-coordinate.
 The sorted sequence is denoted 
\begin_inset Formula $u_{1},...,u_{n}$
\end_inset


\end_layout

\begin_layout Enumerate
Initialize the empty stack 
\begin_inset Formula $S$
\end_inset

 and push 
\begin_inset Formula $u_{1}$
\end_inset

and 
\begin_inset Formula $u_{2}$
\end_inset

onto it (the vertices with the two highest coordinates).
\end_layout

\begin_layout Enumerate
for 
\begin_inset Formula $j=3...n-1$
\end_inset

 (we skip the lowest vertex in the loop)
\end_layout

\begin_deeper
\begin_layout Enumerate
If 
\begin_inset Formula $u_{j}$
\end_inset

and and the top of the stack are on different chains (left or right chains).
\end_layout

\begin_deeper
\begin_layout Enumerate
Pop all vertices from 
\begin_inset Formula $S$
\end_inset


\end_layout

\begin_layout Enumerate
Insert a diagonal from 
\begin_inset Formula $u_{j}$
\end_inset

to each popped vertex except the last one
\end_layout

\begin_layout Enumerate
Push 
\begin_inset Formula $u_{j-1}$
\end_inset

and 
\begin_inset Formula $u_{j}$
\end_inset

 to the stack (always have the last two seen vertices on the stack)
\end_layout

\end_deeper
\begin_layout Enumerate
else
\end_layout

\begin_deeper
\begin_layout Enumerate
Pop one vertex from 
\begin_inset Formula $S$
\end_inset

 (ensures we pop at least one vertex, and there will be at least two on
 the stack)
\end_layout

\begin_layout Enumerate
Keep popping vertices from 
\begin_inset Formula $S$
\end_inset

 while the diagonal from 
\begin_inset Formula $u_{j}$
\end_inset

to the vertex a the top of the stack is inside 
\begin_inset Formula $P$
\end_inset

, and insert the diagonal into 
\begin_inset Formula $D$
\end_inset

(of course only the diagonals within 
\begin_inset Formula $P$
\end_inset

)
\end_layout

\begin_layout Enumerate
Push the last vertex popped onto 
\begin_inset Formula $S$
\end_inset

 (in case step 2 never popped anything we push back the original vertex)
\end_layout

\begin_layout Enumerate
Push 
\begin_inset Formula $u_{j}$
\end_inset

onto 
\begin_inset Formula $S$
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Add diagonals from 
\begin_inset Formula $u_{n}$
\end_inset

to all vertices on the stack except the first and last vertex (doing so
 would cross diagonals)
\end_layout

\begin_layout Standard
Next some details and notes for the different steps of the algorithm will
 be described.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $S$
\end_inset

 contains all the vertices for which we might add more diagonals to.
 We see this from the algorithm in that we only completely remove vertices
 in step 3.a.i when we add diagonals to these vertices
\end_layout

\begin_layout Enumerate
\begin_inset Formula $S$
\end_inset

 contains the vertices we encounter.
 We see in both branches at step 3.a and 3.b we add the current vertex 
\begin_inset Formula $u_{j}$
\end_inset

to the stack.
\end_layout

\begin_layout Enumerate
The part of 
\begin_inset Formula $P$
\end_inset

 that still needs to be triangulated above 
\begin_inset Formula $v_{j}$
\end_inset

forms an 
\begin_inset Quotes eld
\end_inset

upside down funnel
\begin_inset Quotes erd
\end_inset

 (see image.
 It is a bit hard to imagine at first, but at some point it makes perfect
 sense, since we shoot diagonals upwards without crossing a boundary).
 The funnel consists of two chains
\end_layout

\begin_deeper
\begin_layout Enumerate
One chain will consist of reflex vertices.
 These have degree of at least 
\begin_inset Formula $180\text{\textdegree}$
\end_inset

.
 It makes sense that these will be part of the polygon above 
\begin_inset Formula $v_{j}$
\end_inset

 that have not been triangulated yet, since their degree makes it impossible
 to connect diagonals without breaking the polygon barrier.
 This is essentially the case 3.b, and line 3.b.ii checks wether we break the
 polygon barrier by shooting upwards diagonals.
 However, the diagonals we are able to connect are consecutive (say there
 are 5 reflex vertices, the first 3 might be far enough away we do not break
 the polygon barrier, but afterwards the angle to the remaining two i too
 great to connect diagonals without breaking the barrier).
 This is reflected in the algorithm that keeps popping vertices in step
 3.b.ii.
 Furthermore, line 3.b.i pops one vertex, and we cannot do anything with this
 reflex vertex since it is already connected by an edge to 
\begin_inset Formula $v_{j}$
\end_inset

.
 How we check that shooting diagonals between reflex vertices can be done
 as follows.
 We want to make a diagonal from 
\begin_inset Formula $v_{j}$
\end_inset

to 
\begin_inset Formula $v_{k}$
\end_inset

(which was popped from the stack).
 We look at 
\begin_inset Formula $v_{j}$
\end_inset

, 
\begin_inset Formula $v_{k}$
\end_inset

that was just popped from the stack and the previously popped vertex (this
 can be the initial popped vertex that in line 3.b.i)
\end_layout

\begin_layout Enumerate
The other chain is just part of a single edge (we might not have reached
 the lower end point yet since it can be lower than 
\begin_inset Formula $v_{j}$
\end_inset

), let us call it 
\begin_inset Formula $e$
\end_inset

.
 However, we can say that the lower end point of 
\begin_inset Formula $e$
\end_inset

 bounds the height of the 
\begin_inset Quotes eld
\end_inset

funnel
\begin_inset Quotes erd
\end_inset

, since this is from where we eventually shoot up diagonals to the reflex
 edges in step 3.a of the algorithm.
 We can also shoot diagonals from the lower end point of 
\begin_inset Formula $e$
\end_inset

 to all vertices of the funnel (which will be all in the stack) except the
 last one, since this is the upper end point of 
\begin_inset Formula $e$
\end_inset

 and we see this in line 3.a.ii.
 We also see all these vertices are now popped (including the upper end
 point of 
\begin_inset Formula $e$
\end_inset

).
 
\end_layout

\end_deeper
\begin_layout Enumerate
The invariant of the funnel is kept after 3.a or 3.b has been executed.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
For case 3.a the invariant is kept as follows: The untriangulated part of
 
\begin_inset Formula $P$
\end_inset

 above 
\begin_inset Formula $v_{j}$
\end_inset

will be bound by the diagonal from 
\begin_inset Formula $v_{j}$
\end_inset

to the previously on top of the stack vertex (this makes a diagonal that
 makes it impossible to shoot up more diagonals farther than the previously
 on top of the stack vertex), and the edge downward from the previously
 on top of stack vertex.
 This is like a funnel again with the pointy end at 
\begin_inset Formula $v_{j}$
\end_inset


\end_layout

\begin_layout Enumerate
We need to argue it for case 3.b as well: Here we try to connect as many
 reflex vertices as possible and push back the last vertex.
 This last vertex either had a diagonal added if we do anything in 3.b.ii
 or when we could not add any diagonals it must have been the neighbor (only
 do 3.b.i and nothing in 3.b.ii).
 Then we push 
\begin_inset Formula $v_{j}$
\end_inset

to the stack - this is still a funnel with a part of the edge and a chain
 of reflex vertices (this might only be 
\begin_inset Formula $v_{j}$
\end_inset

) so we must again have a funnel.
\end_layout

\end_deeper
\end_body
\end_document
