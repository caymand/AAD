#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Vertex coloring
\end_layout

\begin_layout Standard
As an alternative to rejecting anyone at the bar, another k-1 bars are bought,
 for a total of 
\begin_inset Formula $k$
\end_inset

 bars.
 Then each night, the guests will be split into 
\begin_inset Formula $k$
\end_inset

 groups such that no groups will have any fights.
\end_layout

\begin_layout Subsection
Graph problem
\end_layout

\begin_layout Standard
We model the above problem as a graph with a vertex for each guest, and
 an edge between a pair of vertices is a potential fight.
 To partition the guests we aim to give the end points of each edge a different
 number between 
\begin_inset Formula $1$
\end_inset

 and 
\begin_inset Formula $k$
\end_inset

.
 This is known as a proper 
\begin_inset Formula $k$
\end_inset

 coloring of the graph.
 This gives the vertex-coloring problem, where is has to be decided whether
 a given graph 
\begin_inset Formula $G$
\end_inset

 and for the constant 
\begin_inset Formula $k$
\end_inset

 the graph has a 
\begin_inset Formula $k$
\end_inset

-vertex-coloring (this is NPC).
 
\end_layout

\begin_layout Standard
We can assume that there are only bought 
\begin_inset Formula $k=5$
\end_inset

 bars, so maybe for a constant 
\begin_inset Formula $k$
\end_inset

 we can find a polynomial time FPT algorithm.
 This problem is however also NP complete, so a 
\begin_inset Formula $f(k)\cdot n^{c}$
\end_inset

 complexity algorithm would imply P=NP.
\end_layout

\begin_layout Section
Clique problem
\end_layout

\begin_layout Standard
We can check if a graph contains a clique of size 
\begin_inset Formula $k$
\end_inset

 in 
\begin_inset Formula $O(n^{k})$
\end_inset

 time.
 The naive approach is to for each subset of 
\begin_inset Formula $k$
\end_inset

 vertices, 
\begin_inset Formula ${n \choose k}=O(\frac{n^{k}}{k^{2}})$
\end_inset

, check in time 
\begin_inset Formula $k^{2}$
\end_inset

 whether any of the groups form a clique.
 This is however very hard since it is exponential in 
\begin_inset Formula $k$
\end_inset

.
 Again, if we were to design an FPT algorithm for some 
\begin_inset Formula $k$
\end_inset

, say 
\begin_inset Formula $k=100$
\end_inset

, and assume it is NP-hard for 
\begin_inset Formula $k=100$
\end_inset

, then we would have an 
\begin_inset Formula $O(n^{100})$
\end_inset

 time algorithm using the above technique and have thus P=NP.
 There is however an XP algorithm for this problem, and it seems hard to
 explain why XP algorithms do not seem to have FPT algorithms.
 In fact it is W[1]-hard that the clique problem for a fixed 
\begin_inset Formula $k$
\end_inset

 is not in FPT.
 Therefore we are unlikely to find a 
\begin_inset Formula $f(k)\cdot n^{o(k)}$
\end_inset

time algorithm and our 
\begin_inset Formula $O(n^{k})$
\end_inset

 is in some sense optimal
\end_layout

\begin_layout Standard
We now imagine the town as a graph, where there is an edge between two vertices
 if the people are friends.
 It is believed that people get mad if they are rejected at the door of
 the bar.
 Furthermore, whenever a group of friends show up at the bar, and you reject
 any one of them, then they will all get angry and attack you - they share
 a one for all semantic and any one guest rejected in the group rejected
 makes the entire group angry.
 We are only capable of fighting 
\begin_inset Formula $k-1$
\end_inset

 guests, so we are afraid of cliques of 
\begin_inset Formula $k$
\end_inset

, since this will be a group where everyone knows everyone and rejecting
 one of them makes them all mad.
 We have just discussed the algorithm for determining whether a clique of
 size 
\begin_inset Formula $k$
\end_inset

 exists is 
\begin_inset Formula $O(n^{k})$
\end_inset

 and it is optimal.
\end_layout

\begin_layout Standard
However, it is imagined that people have very few friends - non-one has
 more than 
\begin_inset Formula $\Delta=20$
\end_inset

-friends, so we need to figure out if a 
\begin_inset Formula $k$
\end_inset

 size clique exists within a 
\begin_inset Formula $\Delta$
\end_inset

-degree graph.
 Now a simple algorithm can be created.
 If we guess a vertex 
\begin_inset Formula $v$
\end_inset

 that is part of a clique, then we check all the 
\begin_inset Formula $2^{\Delta}$
\end_inset

 subset of the neighbors of 
\begin_inset Formula $v$
\end_inset

, and return the largest clique.
 We can get away with only considering the (at most) 
\begin_inset Formula $\Delta$
\end_inset

 neighbors of 
\begin_inset Formula $v$
\end_inset

 since in the clique everyone knows each other, and the clique can therefore
 be no larger than the size of some subset of friends/neighbors of 
\begin_inset Formula $v$
\end_inset

.
 Therefore we consider each subset and checks if it is a clique.
 Checking if the subset is a clique takes at most 
\begin_inset Formula $\Delta²$
\end_inset

 time, since we for each neighbor needs to check if there is an edge to
 every other neighbor in the subset.
 We however never know if we guessed 
\begin_inset Formula $v$
\end_inset

 to be a clique member, so we do it for all vertices and get the final running
 time 
\begin_inset Formula $O(\Delta²\cdot2^{\Delta}\cdot n)$
\end_inset

.
 This shows that CLIQUE is FPT when the parameter to the algorithm is the
 degree of the graph instead of the clique size.
\end_layout

\begin_layout Section
Types of parameterization
\end_layout

\begin_layout Standard
For the bar fight prevention problem, the parameter 
\begin_inset Formula $k$
\end_inset

 what explicitly given to the algorithm as a property we want from the solution.
\end_layout

\begin_layout Standard
For the CLIQUE problem, 
\begin_inset Formula $\Delta$
\end_inset

, was not given as an input to the algorithm, but instead a measure of a
 property (degree) that we require to solve the problem efficiently.
 It is a structural property of the instance of interest.
\end_layout

\begin_layout Standard
For successful parameterized algorithms we need to
\end_layout

\begin_layout Enumerate
Believe that the selected parameter is typically small (otherwise the FPT
 algorithm will not be fast since it is exponential in the parameter).
\end_layout

\begin_layout Enumerate
We want the combinatorial explosion restricted to the parameter - we want
 FPT algorithms.
\end_layout

\begin_layout Section
Definitions
\end_layout

\begin_layout Enumerate
Definition 1.1.
 A parameterized problem is a language 
\begin_inset Formula $L\subseteq\Sigma^{*}\times N$
\end_inset

, where Σ is a fixed, finite alphabet.
 For an instance (x, k) ∈ Σ∗ × N, k is called the parameter.
\end_layout

\begin_layout Enumerate
Definition 1.2.
 A parameterized problem L ⊆ Σ∗ × N is called fixed- parameter tractable
 (FPT) if there exists an algorithm A (called a fixed-parameter algorithm),
 a computable function f : N → N, and a constant c such that, given (x,
 k) ∈ Σ∗ × N, the algorithm A correctly decides whether (x, k) ∈ L in time
 bounded by 
\begin_inset Formula $f(k)·|(x,k)|^{c}$
\end_inset

 (|(x,c)| is the encoding of the instance and the parameter).
 The complexity class containing all fixed-parameter tractable problems
 is called FPT.
\end_layout

\begin_deeper
\begin_layout Enumerate
You can optimize 
\begin_inset Formula $f(k)$
\end_inset


\end_layout

\begin_layout Enumerate
Optimize the polynomial factor 
\begin_inset Formula $|(x,k)|^{c}$
\end_inset

.
 That is, try to minimize 
\begin_inset Formula $c$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate
Definition 1.3.
 A parameterized problem L ⊆ Σ∗ × N is called slice-wise polynomial (XP)
 if there exists an algorithm A and two computable functions f, g: N → N
 such that, given (x, k) ∈ Σ∗ × N, the algorithm A correctly decides whether
 (x, k) ∈ L in time bounded by 
\begin_inset Formula $f(k)·|(x,k)|^{g(k)}$
\end_inset

.
 The complexity class containing all slice-wise polynomial problems is called
 XP.
\end_layout

\begin_layout Standard
The above definition all refer to polynomial in size of the encoding of
 the problem.
\end_layout

\end_body
\end_document
