#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Definitions
\end_layout

\begin_layout Subsection
Las Vegas
\end_layout

\begin_layout Standard
A randomized algorithm that always gives the correct result, but whose running
 time distribution is studied (running time varies per run).
\end_layout

\begin_layout Standard
It is a monte-carlo algorithm with error probability 0.
\end_layout

\begin_layout Subsection
Monte Carlo
\end_layout

\begin_layout Standard
A randomized algorithm that might cause incorrect result, but whose probability
 of being incorrect can be bound.
\end_layout

\begin_layout Subsubsection
One side errors
\end_layout

\begin_layout Standard
For decision problems, if there is a non-zero probability that it errs on
 one of the possible outputs(might only error to produce yes).
\end_layout

\begin_layout Subsubsection
Two-sided error
\end_layout

\begin_layout Standard
For decision problems, there is a non-zero probability that it errs
\end_layout

\begin_layout Section
Randomized quicksort
\end_layout

\begin_layout Standard
A very simple quicksort algorithm for sorting a sequence 
\begin_inset Formula $S$
\end_inset

 of 
\begin_inset Formula $n$
\end_inset

 number could work as follows
\end_layout

\begin_layout Enumerate
Pick element 
\begin_inset Formula $y$
\end_inset

 
\end_layout

\begin_layout Enumerate
Compare 
\begin_inset Formula $y$
\end_inset

 to the elements of 
\begin_inset Formula $S$
\end_inset

 such that 
\begin_inset Formula $S$
\end_inset

 is partitioned into two sets 
\begin_inset Formula $S_{1}$
\end_inset

 and 
\begin_inset Formula $S_{2}$
\end_inset

, where 
\begin_inset Formula $S_{1}$
\end_inset

are those elements smaller than 
\begin_inset Formula $y$
\end_inset

 and 
\begin_inset Formula $S_{2}$
\end_inset

those larger
\end_layout

\begin_layout Enumerate
Do this recursively to sort 
\begin_inset Formula $S_{1},S_{2}$
\end_inset

 and return 
\begin_inset Formula $S_{1},y,S_{2}$
\end_inset

,
\end_layout

\begin_layout Standard
The question is how to pick the element 
\begin_inset Formula $y$
\end_inset

fast.
 On way is to just pick it randomly.
\end_layout

\begin_layout Subsection
Expected running time
\end_layout

\begin_layout Standard
Randomized quicksorts works by selecting the pivot element in line 1 uniformly
 at random.
 We can analyze the expected running time by looking at the number of comparison
s the randomized algorithm will perform.
 That is, we analyze the time spent at step 2 of the algorithm.
\end_layout

\begin_layout Standard
Define 
\begin_inset Formula $S^{i}$
\end_inset

 to denote the 
\begin_inset Formula $i$
\end_inset

'th rank of 
\begin_inset Formula $S$
\end_inset

 (the 
\begin_inset Formula $i$
\end_inset

'th smallest element of 
\begin_inset Formula $S$
\end_inset

).
 Additionally the random variable 
\begin_inset Formula $X_{ij}$
\end_inset

 is defined to be 
\begin_inset Formula $1$
\end_inset

 of 
\begin_inset Formula $S^{i}$
\end_inset

 and 
\begin_inset Formula $S^{j}$
\end_inset

 are compared and 0 otherwise.
 Elements are only compared with the pivot element 
\begin_inset Formula $y$
\end_inset

, meaning 
\begin_inset Formula $S^{i}$
\end_inset

 and 
\begin_inset Formula $S^{j}$
\end_inset

are only compared if one of them is the pivot element.
 After comparing 
\begin_inset Formula $S^{i}$
\end_inset

 to 
\begin_inset Formula $S^{j}$
\end_inset

 we put one of them in the sublist 
\begin_inset Formula $S_{i}$
\end_inset

 to be recursively sorted and 
\begin_inset Formula $S^{i}$
\end_inset

 and 
\begin_inset Formula $S^{j}$
\end_inset

are thereofore only compared once.
 Consequently, 
\begin_inset Formula $X_{ij}$
\end_inset

 is a count of the number of times 
\begin_inset Formula $S^{i}$
\end_inset

 and 
\begin_inset Formula $S^{j}$
\end_inset

 are compared.
 Since each element 
\begin_inset Formula $S^{i}$
\end_inset

 is at most compared to all other elements 
\begin_inset Formula $S^{j}$
\end_inset

 once, we get the total number of comparisons is 
\begin_inset Note Note
status open

\begin_layout Plain Layout
why is this the total number of comparisons
\end_layout

\end_inset

 
\begin_inset Formula 
\[
\sum_{i=1}^{n}\sum_{j>i}X_{ij}
\]

\end_inset

We can take the expectation of the number of comparisons to get the expected
 number of comparisons
\begin_inset Formula 
\[
E\left[\sum_{i=1}^{n}\sum_{j>i}X_{ij}\right]=\sum_{i=1}^{n}\sum_{j>i}E\left[X_{ij}\right]=\sum_{i=1}^{n}\sum_{j>i}p_{ij}
\]

\end_inset

where the first inequality uses linearity of expectation, the second uses
 that the expectation of a Bernoulli r.v is the probability of success and
 
\begin_inset Formula $p_{ij}$
\end_inset

is the probability of success.
 All we need to do now is figure out what 
\begin_inset Formula $p_{ij}$
\end_inset

 is.
\end_layout

\begin_layout Standard
We analyze the execution of RandQS as a binary search tree 
\begin_inset Formula $T$
\end_inset

, with each node being the pivot element 
\begin_inset Formula $y$
\end_inset

 selected and the left subtree the elements compared to be less than 
\begin_inset Formula $y$
\end_inset

 and the right subtree greater than 
\begin_inset Formula $y$
\end_inset

.
 Note, the elements of the left subtree are never compared to the elements
 of the right subtree, but only the parent node (pivot element).
 This confirms that 
\begin_inset Formula $S^{i}$
\end_inset

 and 
\begin_inset Formula $S^{j}$
\end_inset

 are only compared if one of them is the pivot.
 In the tree setting, it means that 
\begin_inset Formula $S^{i}$
\end_inset

 and 
\begin_inset Formula $S^{j}$
\end_inset

 are only compared if one of them is the ancestor to the other.
\end_layout

\begin_layout Subsection
Lemma 
\end_layout

\begin_layout Standard
We can view the binary search tree as a random search tree, since we choose
 each pivot at random, so the nodes of the trees are chosen uniformly at
 random.
 The book calls this permutation 
\begin_inset Formula $\pi$
\end_inset

, but I find this a bit hard to understand.
 Instead i use this lemma.
\end_layout

\begin_layout Standard
The elements 
\begin_inset Formula $S^{i}$
\end_inset

 and 
\begin_inset Formula $S^{j}$
\end_inset

are only compared if and only if 
\begin_inset Formula $S^{i}$
\end_inset

 or 
\begin_inset Formula $S^{j}$
\end_inset

 are chosen as pivot element any element in the range 
\begin_inset Formula $S^{i},...,S^{j}$
\end_inset

 (not the bi-implication).
\end_layout

\begin_layout Subsubsection*
Proof
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $S^{k}$
\end_inset

 be chosen as the pivot element in the current iteration of the algorithm,
 such that 
\begin_inset Formula $S^{i},...,S^{k},...,S^{j}$
\end_inset

.
 We have two cases 
\end_layout

\begin_layout Enumerate
\begin_inset Formula $i<k$
\end_inset

 and 
\begin_inset Formula $k<j$
\end_inset

 in which case 
\begin_inset Formula $S^{i}$
\end_inset

 is put in the left subtree implicitly generated by quicksort and 
\begin_inset Formula $S^{j}$
\end_inset

 in the right subtree.
 In either case, since two subtrees are never compared 
\begin_inset Formula $S^{i}$
\end_inset

 and 
\begin_inset Formula $S^{j}$
\end_inset

 are never compared.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $k\in\{i,j\}$
\end_inset

 in which case either 
\begin_inset Formula $S^{j}$
\end_inset

 or 
\begin_inset Formula $S^{i}$
\end_inset

 is the pivot the other is compared to and put into the left or right subtree
\end_layout

\begin_layout Subsection
Running time cont
\end_layout

\begin_layout Standard
Any element in 
\begin_inset Formula $S^{i},...,S^{j}$
\end_inset

 are equally likely to be picked as the pivot, since the pivot is picked
 uniformly at random.
 Hence there are 
\begin_inset Formula $j-i+1$
\end_inset

 possible ways of picking an element.
 However, picking either 
\begin_inset Formula $S^{i}$
\end_inset

 or 
\begin_inset Formula $S^{j}$
\end_inset

 (2 cases) means 
\begin_inset Formula $X_{ij}=1$
\end_inset

.
 Hence we get
\begin_inset Formula 
\[
p_{ij}=\frac{2}{j-i+1}
\]

\end_inset

Now we can continue with the expectation on number of comparisons
\begin_inset Formula 
\begin{align*}
E\left[\sum_{i=1}^{n}\sum_{j>i}X_{ij}\right] & =\sum_{i=1}^{n}\sum_{j>i}p_{ij}=\sum_{i=1}^{n}\sum_{j>i}\frac{2}{j-i+1}\\
 & =\sum_{i=1}^{n-1}\sum_{j=i+1}^{n}\frac{2}{j-i+1}\\
 & =\sum_{i=1}^{n-1}\sum_{k=2}^{n-i+1}\frac{2}{k}
\end{align*}

\end_inset

The last inequality holds because we can change the limit of summation,
 by starting at 
\begin_inset Formula $k=2$
\end_inset

 since we add 
\begin_inset Formula $i+1$
\end_inset

, and then we also have to stop at 
\begin_inset Formula $n-i+1$
\end_inset

.
 This is a summation trick 
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO.
 Figure more about this
\end_layout

\end_inset

 We can now upper bound this by extending the sum.
\begin_inset Formula 
\begin{align*}
E\left[\sum_{i=1}^{n}\sum_{j>i}X_{ij}\right] & =\sum_{i=1}^{n-1}\sum_{k=2}^{n-i+1}\frac{2}{k}\leq\sum_{i=1}^{n}\sum_{k=2}^{n}\frac{2}{k}=\sum_{i=1}^{n}2\cdot\sum_{k=2}^{n}\frac{1}{k}\\
 & =2n\cdot\sum_{k=2}^{n}\frac{1}{k}\\
 & =2n\cdot\left(\sum_{k=1}^{n}\frac{1}{k}-1\right)\text{ first k=1 will make frac 1}\\
 & =2n(H_{n}-1)\\
 & =2n\cdot H_{n}-2n\\
 & =O(n\log n)
\end{align*}

\end_inset

 so we get in expectation randomized quicksort makes 
\begin_inset Formula $O(n\log n)$
\end_inset

comparisons.
\end_layout

\begin_layout Section
Randomized min-cut
\end_layout

\begin_layout Standard
A multigraph is a graph that might contain multiple edges between pairs
 of vertices.
 A cut in a graph is, according to the book and in this setting, a set of
 edges whose removal causes the graph to be broken into two or more pieces.
 A min-cut is a cut of minimum cardinality(min number edges) that split
 the graph in at least two.
\end_layout

\begin_layout Standard
A very simple randomized algorithm is now presented for finding a min-cut.
\end_layout

\begin_layout Enumerate
Pick an edge uniformly at random.
\end_layout

\begin_layout Enumerate
Merge the endpoint vertices of the edge into 1 new vertex.
 
\end_layout

\begin_layout Enumerate
If there as a result of the contraction exists edges between vertices(including
 the new vertex), then keep them
\end_layout

\begin_layout Enumerate
All edges between the merged vertices are removed (we have a multigraph),
 so we have no self-loops to the new vertex.
\end_layout

\begin_layout Enumerate
When two vertices remain, the remaining edges between the vertices is a
 potential cut.
\end_layout

\begin_layout Subsection
Contractions
\end_layout

\begin_layout Standard
Merging two endpoints of an edge into a new vertex, and removing any other
 edges between the two vertices to eliminate self-loops, is known as a contracti
on.
 This process reduces the vertex count by 1.
 
\end_layout

\begin_layout Subsection
Lemma
\end_layout

\begin_layout Standard
RandMinCut returns a cut.
\end_layout

\begin_layout Subsubsection*
Proof
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $V_{1},V_{2}\subset V$
\end_inset

 be two subsets of 
\begin_inset Formula $V$
\end_inset

.
 Both are constructed from contraction of vertices.
 So this essentially the termination condition of the algorithm - all vertices
 have been contracted into two vertices 
\begin_inset Formula $V_{1},V_{2}$
\end_inset

.
 The set of edges, 
\begin_inset Formula $C$
\end_inset

, going from 
\begin_inset Formula $V_{1}$
\end_inset

to 
\begin_inset Formula $V_{2}$
\end_inset

 are the proposed min-cut found by the algorithm.
 We will now prove that this is a cut in 
\begin_inset Formula $G$
\end_inset

.
\end_layout

\begin_layout Standard
For contradiction, suppose that 
\begin_inset Formula $C$
\end_inset

 is not a cut in 
\begin_inset Formula $G$
\end_inset

.
 This means we have a path 
\begin_inset Formula $\pi=u\rightsquigarrow v$
\end_inset

 from a vertex 
\begin_inset Formula $u\in V_{1}$
\end_inset

 to 
\begin_inset Formula $v\in V_{2}$
\end_inset

 in 
\begin_inset Formula $G$
\end_inset

 after removing the edges in 
\begin_inset Formula $C$
\end_inset

.
 In other words, one edge, 
\begin_inset Formula $e$
\end_inset

, on the path 
\begin_inset Formula $\pi$
\end_inset

 that connects 
\begin_inset Formula $V_{1}$
\end_inset

 and 
\begin_inset Formula $V_{2}$
\end_inset

 is not in 
\begin_inset Formula $C$
\end_inset

.
 However, we removed edges in two ways
\end_layout

\begin_layout Enumerate
When we select an edge, and merge endpoint we remove the selected edge
\end_layout

\begin_layout Enumerate
Removing self-loops after merging 
\end_layout

\begin_layout Standard
and in either way, the edges removed are between vertices that end in the
 same set - either 
\begin_inset Formula $V_{1}$
\end_inset

 or 
\begin_inset Formula $V_{2}$
\end_inset

.
 So the remaining edges must be those in 
\begin_inset Formula $C$
\end_inset

.
 This contradicts that 
\begin_inset Formula $e$
\end_inset

 can exists and thereby that there is a path 
\begin_inset Formula $\pi$
\end_inset

 from 
\begin_inset Formula $u$
\end_inset

 to 
\begin_inset Formula $v$
\end_inset

.
 Therefore, all vertices that connect 
\begin_inset Formula $V_{1}$
\end_inset

 and 
\begin_inset Formula $V_{2}$
\end_inset

 are those in 
\begin_inset Formula $C$
\end_inset

, and therefore 
\begin_inset Formula $C$
\end_inset

 is a cut, since removing the edges in 
\begin_inset Formula $C$
\end_inset

 results in the graph being split up in the two sets 
\begin_inset Formula $V_{1}$
\end_inset

 and 
\begin_inset Formula $V_{2}$
\end_inset

.
\end_layout

\begin_layout Subsection
Neighborhood
\end_layout

\begin_layout Standard
The neighborhood of a vertex, 
\begin_inset Formula $N[v]$
\end_inset

, is the set of vertices adjacent to 
\begin_inset Formula $v$
\end_inset

.
 The degree, 
\begin_inset Formula $d(v)$
\end_inset

, is the number of edges incident on 
\begin_inset Formula $v$
\end_inset

.
 For a set 
\begin_inset Formula $S$
\end_inset

, 
\begin_inset Formula $N[S]$
\end_inset

, is the union of the neighborhood of its constituents.
\end_layout

\begin_layout Standard
When there are no self-loop we have 
\begin_inset Formula $N[v]=d(v)$
\end_inset

.
\end_layout

\begin_layout Subsection
Correctness of rand min-cut
\end_layout

\begin_layout Standard
For any min-cut 
\begin_inset Formula $C$
\end_inset

, the probability that RandMinCut(G) returns 
\begin_inset Formula $C$
\end_inset

 is 
\begin_inset Formula $\geq\frac{2}{n(n-1)}$
\end_inset


\end_layout

\begin_layout Subsubsection*
Proof
\end_layout

\begin_layout Standard
First lets note that the degree 
\begin_inset Formula $d(v)\geq|C|$
\end_inset

 for all 
\begin_inset Formula $v\in V$
\end_inset

, since otherwise we could remove the edges incident on 
\begin_inset Formula $v$
\end_inset

and have a cut smaller than 
\begin_inset Formula $|C|$
\end_inset

 - contradicting 
\begin_inset Formula $C$
\end_inset

 is a min-cut.
 Additionally, we get that 
\begin_inset Formula 
\begin{equation}
|E|=\frac{1}{2}\sum_{v\in V}d(v)\geq\frac{1}{2}n\cdot|C|
\end{equation}

\end_inset

where the first inequality holds because each edge is counted twice (once
 for each of its endpoints) when calculating the degree over all vertices.
 The inequality holds by using the bound on the degree from earlier.
 Hence the number of edges is at least 
\begin_inset Formula $\frac{1}{2}n\cdot|C|$
\end_inset

.
 The proof is about bounding the probability of never contracting an edge
 in 
\begin_inset Formula $C$
\end_inset

.
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $A_{i}$
\end_inset

 denote the event of not picking an edge in 
\begin_inset Formula $C$
\end_inset

 at the 
\begin_inset Formula $i$
\end_inset

'th iteration of the algorithm for 
\begin_inset Formula $i=1,2,...,n-2$
\end_inset

 (two vertices must remain at termination).
 During the first iteration of the algorithm, the probability of picking
 an edge from 
\begin_inset Formula $C$
\end_inset

 is 
\begin_inset Formula 
\[
\frac{|C|}{|E|}\leq\frac{|C|}{\frac{1}{2}n\cdot|C|}=\frac{2}{n}
\]

\end_inset

where the first inequality holds since we know 
\begin_inset Formula $|E|\geq\frac{1}{2}n\cdot|C|$
\end_inset

, so the substitution makes the fraction larger.
 The probability of event 
\begin_inset Formula $A_{1}$
\end_inset

 is then bounded by 
\begin_inset Formula $P(A_{1})\geq1-\frac{2}{n}$
\end_inset

.
 If 
\begin_inset Formula $A_{1}$
\end_inset

 happens, then what is the probability of not picking an edge from 
\begin_inset Formula $C$
\end_inset

 agin? That is, what is 
\begin_inset Formula $\Pr\left(A_{2}|A_{1}\right)$
\end_inset

.
 Assuming 
\begin_inset Formula $A_{1}$
\end_inset

 was successful then the current graph must have at least
\begin_inset Formula 
\[
|E_{1}|\geq\frac{1}{2}(n-1)\cdot|C|
\]

\end_inset

 since we can again use (1) on the remaining 
\begin_inset Formula $n-1$
\end_inset

 vertices, since these must also have a degree of at least 
\begin_inset Formula $|C|$
\end_inset

, otherwise we could just remove the vertices incident to a vertex with
 
\begin_inset Formula $d(v)<|C|$
\end_inset

 and we have smaller cut.
 Note this only holds because we only removed self loops in addition to
 the contracted edge.
 Hence we have that 
\begin_inset Formula 
\[
\Pr\left(A_{2}|A_{1}\right)=1-\frac{|C|}{|E_{1}|}\ge1-\frac{|C|}{\frac{1}{2}(n-1)\cdot|C|}=\frac{2}{(n-1)}
\]

\end_inset

and the probability is bounded by 
\begin_inset Formula $\Pr\left(A_{2}|A_{1}\right)\ge2/(n-1)$
\end_inset

.
 Generally after the 
\begin_inset Formula $i$
\end_inset

'th iteration, we have removed 
\begin_inset Formula $i$
\end_inset

 vertices, and the remaining vertices must have degree of at least 
\begin_inset Formula $|C|$
\end_inset

, so the graph must at this point have at least 
\begin_inset Formula $\frac{1}{2}(n-i)\cdot|C|$
\end_inset

 edges.
 Making the probability of not choosing an edge in 
\begin_inset Formula $C$
\end_inset

 at the 
\begin_inset Formula $i$
\end_inset

'th iteration, given the previous 
\begin_inset Formula $i-1$
\end_inset

 previous iteration did not do so either is
\begin_inset Formula 
\[
\Pr\left(A_{i}|\cap_{j=1}^{i-1}A_{j}\right)\geq1-\frac{2}{(n-i+1)}
\]

\end_inset

note the 
\begin_inset Formula $(i+1)$
\end_inset

 since at 
\begin_inset Formula $i=2$
\end_inset

 we had 
\begin_inset Formula $n-1$
\end_inset

.
 Each contraction reduces the vertex count by 1 and we continue until 2
 vertices remain.
 So we want to bound the probability that no edge in 
\begin_inset Formula $C$
\end_inset

 was picked in all 
\begin_inset Formula $n-2$
\end_inset

 iterations (this leaves 2 vertices left).
 This is different from 
\begin_inset Formula $\Pr\left(A_{i}|\cap_{j=1}^{i-1}A_{j}\right)$
\end_inset

 since we want it to hold simultaneously for all iterations.
 That is, we do not want a conditional probability, but we want 
\begin_inset Formula 
\[
\Pr(\text{no edge in \ensuremath{C} is ever picked by rand min-cut)}=\Pr\left(\cap_{i=1}^{n-2}A_{i}\right)
\]

\end_inset

We can use the fact that 
\begin_inset Formula 
\[
\Pr\left(\cap_{i=1}^{k}B_{i}\right)=\Pr\left(B_{1}\right)\cdot\Pr\left(B_{2}|B_{1}\right)\cdot,...,\cdot\Pr\left(B_{k}\cap_{i=1}^{k-1}B_{i}\right)
\]

\end_inset

together with the upper bound 
\begin_inset Formula $\Pr\left(A_{i}|\cap_{j=1}^{i-1}A_{j}\right)$
\end_inset

 we have on each 
\begin_inset Formula 
\begin{align*}
\Pr\left(\cap_{i=1}^{n-2}A_{i}\right) & \geq\prod_{i=1}^{n-2}1-\frac{2}{(n-i+1)}\\
 & =\prod_{i=1}^{n-2}\frac{n-i+1}{n-i+1}-\frac{2}{(n-i+1)}\\
 & =\prod_{i=1}^{n-2}\frac{n-i+1-2}{n-i+1}\\
 & =\prod_{i=1}^{n-2}\frac{n-i-1}{n-i+1}
\end{align*}

\end_inset

The denominator and numerator differ by 2, so we have a telescoping sum,
 where each term is 2 aspart.
 So the denominator will take values 
\begin_inset Formula $n,n-1,...,4,3$
\end_inset

 and the numerator starts at 
\begin_inset Formula $n-2,n-3,...,2,1$
\end_inset

.
 So everything cancels out except
\begin_inset Formula 
\[
\Pr\left(\cap_{i=1}^{n-2}A_{i}\right)\ge\frac{2\cdot1}{n\cdot(n-1)}\ge\frac{2}{n^{2}}
\]

\end_inset

and so with probability more than 
\begin_inset Formula $\frac{2}{n^{2}}$
\end_inset

 we will return a min-cut.
 So if we were to repeat the algorithm 
\begin_inset Formula $\frac{n^{2}}{2}$
\end_inset

times, where each time we choose an edge uniformly at random, the probability
 of not returning a min cut is
\family typewriter

\begin_inset Formula 
\[
\prod_{i=1}^{n^{2}/2}1-\frac{n^{2}}{2}<1/e
\]

\end_inset

So we can control how accurate the algorithm is by just running it more
 times and sacrifice performance.
\end_layout

\end_body
\end_document
